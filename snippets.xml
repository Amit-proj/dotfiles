<?xml version="1.0" encoding="utf-8" standalone="no"?>
<folders>
	<folder>
		<title>Jenkins</title>
		<snippets>
			<snippet>
				<title>decrypt jenkins string</title>
				<content>println(hudson.util.Secret.decrypt(&apos;&apos;))</content>
			</snippet>
			<snippet>
				<title>Jenkins cancel queue</title>
				<content>Jenkins.instance.queue.clear()</content>
			</snippet>
			<snippet>
				<title>abort job</title>
				<content>Jenkins.instance.getItemByFullName(&quot;Monitor_Production_Images&quot;).getBuildByNumber(3515).finish(
	hudson.model.Result.ABORTED, new java.io.IOException(&quot;Aborting build&quot;)
);</content>
			</snippet>
			<snippet>
				<title>all plugins</title>
				<content>def allPlugins = []
Jenkins.instance.pluginManager.plugins.each{
 plugin -&gt;
   allPlugins &lt;&lt; &quot;${plugin.getShortName()}:${plugin.getVersion()}&quot;
}
println allPlugins.sort().each {
    println it
}</content>
			</snippet>
			<snippet>
				<title>approve scripts</title>
				<content>import org.jenkinsci.plugins.scriptsecurity.scripts.*
toApprove = ScriptApproval.get().getPendingScripts().collect()
toApprove.each {pending -&gt; ScriptApproval.get().approveScript(pending.getHash())}</content>
			</snippet>
			<snippet>
				<title>Delete series of builds</title>
				<content>Jenkins.instance.getItemByFullName(&apos;JobName&apos;).builds.findAll { it.number &gt; 10 &amp;&amp; it.number &lt; 1717 }.each { it.delete() }</content>
			</snippet>
			<snippet>
				<title>get all successful builds of job</title>
				<content>return jenkins.model.Jenkins.instance.getJob(System.getenv(&apos;JOB_NAME&apos;)).builds.findAll{ it.result == hudson.model.Result.SUCCESS }.collect{ &quot;$it.number&quot; }</content>
			</snippet>
			<snippet>
				<title>get all users</title>
				<content>import hudson.model.User

User.getAll().each { user -&gt;
   println user
}</content>
			</snippet>
			<snippet>
				<title>delete all offline nodes</title>
				<content>for (aSlave in hudson.model.Hudson.instance.slaves) {
    if (aSlave.getComputer().isOffline()) {
        aSlave.getComputer().setTemporarilyOffline(true,null);
        aSlave.getComputer().doDoDelete();
    }
}</content>
			</snippet>
			<snippet>
				<title>delete parameters</title>
				<content>def all_jobs = [
  &quot;spotinst/spot-aws-ec2-market-predictions-v2/main&quot;,
]
for (job in all_jobs) {
  def props = Jenkins.instance.getItemByFullName(job).getProperty(ParametersDefinitionProperty.class)
  if (props != null) {
    def bntt_result = props.getParameterDefinitions().removeAll { &apos;BUILD_NUM_TO_TAG&apos; == it.name }
    def dp_result   = props.getParameterDefinitions().removeAll { &apos;DEPLOY_PROD&apos; == it.name }
    def bla_tests   = props.getParameterDefinitions().removeAll { &apos;ADD_TESTS_TO_RUN&apos; == it.name }
    println &quot;bntt_result: ${bntt_result}\ndp_result: ${dp_result}\nbla_tests: ${bla_tests}&quot;
  }
}</content>
			</snippet>
		</snippets>
	</folder>
	<folder>
		<title>Bash</title>
		<snippets>
			<snippet>
				<title>curl with format</title>
				<content>curl \
-I -L -k -H &apos;Cache-Control: no-cache&apos; https://10.60.4.6 \
-H &apos;host: www.top10datingsites.com.au&apos; \
-w &apos;lookup:        %{time_namelookup}\nconnect:       %{time_connect}\nappconnect:    %{time_appconnect}\npretransfer:   %{time_pretransfer}\nredirect:      %{time_redirect}\nstarttransfer (TTFB): %{time_starttransfer}\ntotal:         %{time_total}\n&apos;</content>
			</snippet>
			<snippet>
				<title>shorten url</title>
				<content>curl -s http://tinyurl.com/api-create.php?url=https://www.google.com | pbcopy</content>
			</snippet>
			<snippet>
				<title>share text</title>
				<content>cat file.ext | curl -F &apos;f:1=&lt;-&apos; ix.io | pbcopy</content>
			</snippet>
			<snippet>
				<title>ps1</title>
				<content>arrow_ec() { [[ $? == &quot;0&quot; ]] &amp;&amp; (echo -e &quot;\e[32m➜\e[m&quot;) || (echo -e &quot;\e[31m➜\e[m&quot;) }
export PS1=&apos;\[$(arrow_ec)\]  \[\e[36m\]\w\[\e[m\] \[\e[34m\]\u\[\e[m\]@\[\e[32m\]\h\[\e[m\]
 » &apos;
alias ll=&apos;ls -l&apos;</content>
			</snippet>
			<snippet>
				<title>ps1-simple</title>
				<content>export PS1=&apos;\[\e[36m\]\w\[\e[m\] \[\e[34m\]\u\[\e[m\]@\[\e[32m\]\h\[\e[m\] &apos;
alias ll=&apos;ls -l --color&apos;</content>
			</snippet>
			<snippet>
				<title>default editor vim</title>
				<content>sudo update-alternatives --config editor &lt;&lt;&lt; /usr/bin/vim.basic</content>
			</snippet>
			<snippet>
				<title>decrypt with openssl</title>
				<content>openssl enc -aes-256-cbc -d -in credentials.xml.encrypted -out credentials.xml</content>
			</snippet>
			<snippet>
				<title>pablo</title>
				<content>Pablo3mili03sc0barGaviria</content>
			</snippet>
			<snippet>
				<title>print proc cmdline or environ</title>
				<content>xargs -0 printf &apos;%s\n&apos; &lt;/proc/1/cmdline</content>
			</snippet>
			<snippet>
				<title>python http server</title>
				<content>python3 -m http.server 9000</content>
			</snippet>
			<snippet>
				<title>find java home</title>
				<content>dirname $(dirname $(readlink -f $(which javac)))</content>
			</snippet>
			<snippet>
				<title>ps alternative on docke</title>
				<content>for i in /proc/*; do
  [[ $i =~ /proc/[0-9] ]] || continue
  echo &quot;==== $i ====&quot;
  xargs -0 printf &apos;%s\n&apos; &lt;$i/cmdline
done

</content>
			</snippet>
			<snippet>
				<title>fancy_print</title>
				<content>function fancy_print() {
  str=$1
  str_len=${#str}
  eval printf &apos;=%.0s&apos; {1..$((str_len + 6))}
  echo -e &quot;\n== $str ==&quot;
  eval printf &apos;=%.0s&apos; {1..$((str_len + 6))}
  echo &quot;&quot;
}</content>
			</snippet>
			<snippet>
				<title>colors</title>
				<content># Colors
black() { echo -e &quot;\033[30m${*}\033[0m&quot;; }
red() { echo -e &quot;\033[31m${*}\033[0m&quot;; }
green() { echo -e &quot;\033[32m${*}\033[0m&quot;; }
yellow() { echo -e &quot;\033[33m${*}\033[0m&quot;; }
blue() { echo -e &quot;\033[34m${*}\033[0m&quot;; }
magenta() { echo -e &quot;\033[35m${*}\033[0m&quot;; }
cyan() { echo -e &quot;\033[0;36m${*}\033[0m&quot;; }
gray() { echo -e &quot;\033[90m${*}\033[0m&quot;; }
warn() { yellow &quot;$(date) [WARNING] - $*&quot;; }
err() {
  red &quot;$(date) [ERROR] - $*&quot;
  exit 1
}
info() { cyan &quot;$(date) [INFO] - $*&quot;; }
</content>
			</snippet>
		</snippets>
	</folder>
	<folder>
		<title>Docker</title>
		<snippets>
			<snippet>
				<title>mongo rs</title>
				<content>docker run --rm -it --name &quot;test-mongo&quot; mongo mongo \
--host &quot;mongodb://host1,host2,host3/rs0&quot; \
-udbroot -p&apos;pass&apos; --authenticationDatabase admin</content>
			</snippet>
			<snippet>
				<title>redis-cli</title>
				<content>docker run -it --rm redis redis-cli -h host -p port</content>
			</snippet>
			<snippet>
				<title>remove all containers</title>
				<content>docker ps -aq | xargs docker rm -f</content>
			</snippet>
			<snippet>
				<title>run trivy</title>
				<content>docker run -v /var/run/docker.sock:/var/run/docker.sock -v ~/.cache/trivy:/root/.cache/ aquasec/trivy image 109311601880.dkr.ecr.us-west-2.amazonaws.com/rnd/controller:1.0.93-alpha</content>
			</snippet>
		</snippets>
	</folder>
	<folder>
		<title>sql</title>
		<snippets>
			<snippet>
				<title>find user</title>
				<content>select User,Host from mysql.user where lower(User) like &apos;%%&apos;;</content>
			</snippet>
			<snippet>
				<title>grant all priv</title>
				<content>grant all on .* to &apos;&apos;@&apos;%&apos; identified by password &apos;&apos;;</content>
			</snippet>
			<snippet>
				<title>grant select</title>
				<content>grant select on.* to &apos;&apos;@&apos;%&apos; identified by &apos;&apos;;</content>
			</snippet>
			<snippet>
				<title>flush priviliges</title>
				<content>FLUSH PRIVILEGES;</content>
			</snippet>
		</snippets>
	</folder>
	<folder>
		<title>AWS cli</title>
		<snippets>
			<snippet>
				<title>ssm get all params</title>
				<content>aws ssm describe-parameters | jq -r &apos;.Parameters[].Name&apos; | grep &quot;&quot;</content>
			</snippet>
			<snippet>
				<title>ssm get param value</title>
				<content>aws ssm get-parameters --with-decryption --names &quot;cred_article-bos_firehose-access-key-id_development&quot; | jq -c &quot;.Parameters[] | {key: .Name, value: .Value}&quot;</content>
			</snippet>
			<snippet>
				<title>add security group rule</title>
				<content>aws ec2 update-security-group-rule-descriptions-ingress --group-id sg-01b4d94542c5b90e8 --ip-permissions \
&apos;[{&quot;IpProtocol&quot;: &quot;tcp&quot;, &quot;FromPort&quot;: 3306, &quot;ToPort&quot;: 3306, &quot;IpRanges&quot;: [{&quot;CidrIp&quot;: &quot;35.170.223.65/32&quot;, &quot;Description&quot;: &quot;BoomiFlow Public IP&quot;}]}]&apos;</content>
			</snippet>
			<snippet>
				<title>get params by path as env vars</title>
				<content>/usr/local/bin/aws ssm get-parameters-by-path \
  --path &quot;/spotinst-gateway&quot;  \
  --region us-east-1 \
  --query &quot;Parameters[*].[Name,Value]&quot; \
  --with-decryption | jq \
  -r &apos;.[] | .[0] |= (split(&quot;/&quot;)|.[2]) | &quot;export \(.[0])=\&quot;\(.[1])\&quot;&quot;&apos; | tr &apos;&quot;&apos; &quot;&apos;&quot;</content>
			</snippet>
			<snippet>
				<title>find acm certificate</title>
				<content>export CERT_SUBSTRING=internal &amp;&amp; aws acm list-certificates --query &apos;CertificateSummaryList[].{domain: DomainName,arn: CertificateArn}&apos; | jq -c &apos;.[] | select(.domain | contains($ENV.CERT_SUBSTRING))&apos; | column -t -s,</content>
			</snippet>
			<snippet>
				<title>assume role with web identity (curl)</title>
				<content>curl \
  &quot;https://sts.${AWS_REGION}.amazonaws.com/?Action=AssumeRoleWithWebIdentity&amp;DurationSeconds=3600&amp;RoleArn=$AWS_ROLE_ARN&amp;WebIdentityToken=$(&lt; $AWS_WEB_IDENTITY_TOKEN_FILE)&amp;Version=2011-06-15&amp;RoleSessionName=spotinst-monitor&quot;</content>
			</snippet>
		</snippets>
	</folder>
	<folder>
		<title>nlb</title>
		<snippets>
			<snippet>
				<title>us</title>
				<content>nlb-us-prod-674c2381d56d1e9c.elb.us-east-1.amazonaws.com</content>
			</snippet>
			<snippet>
				<title>usw</title>
				<content>nlb-usw-prod-2d7848a08eeaba48.elb.us-west-1.amazonaws.com</content>
			</snippet>
			<snippet>
				<title>uk</title>
				<content>nlb-uk-prd-f601ad9dc57d5532.elb.eu-west-2.amazonaws.com</content>
			</snippet>
			<snippet>
				<title>sp</title>
				<content>nlb-sp-prod-b76000c3c84d35c8.elb.sa-east-1.amazonaws.com</content>
			</snippet>
			<snippet>
				<title>au</title>
				<content>nlb-au-prod-ccb789623870fd4f.elb.ap-southeast-2.amazonaws.com</content>
			</snippet>
			<snippet>
				<title>in</title>
				<content>nlb-in-prd-c926c17b3ae18219.elb.ap-south-1.amazonaws.com</content>
			</snippet>
		</snippets>
	</folder>
	<folder>
		<title>k8s</title>
		<snippets>
			<snippet>
				<title>get bastion dns</title>
				<content>aws elb --region eu-west-2 describe-load-balancers --query &apos;LoadBalancerDescriptions[?starts_with(DNSName, `bastion`)].DNSName&apos; | jq -r &apos;.[]&apos;</content>
			</snippet>
			<snippet>
				<title>get jenkins secret</title>
				<content>kgsec -n jenkins jenkins -o jsonpath=&quot;{.data.jenkins-admin-password}&quot; | base64 --decode | pbcopy</content>
			</snippet>
		</snippets>
	</folder>
	<folder>
		<title>redislabs</title>
		<snippets>
			<snippet>
				<title>US-Writer</title>
				<content>redis-11111.internal.c106.us-east-1-mz.ec2.cloud.redislabs.com</content>
			</snippet>
			<snippet>
				<title>US</title>
				<content>redis-11111.internal.c107.us-east-1-mz.ec2.cloud.redislabs.com</content>
			</snippet>
			<snippet>
				<title>US-Cache</title>
				<content>renderer-req-cache.yojcdq.0001.use1.cache.amazonaws.com</content>
			</snippet>
			<snippet>
				<title>USW</title>
				<content>redis-11111.internal.c151.us-west-1-1.ec2.cloud.redislabs.com</content>
			</snippet>
			<snippet>
				<title>USW-Cache</title>
				<content>renderer-req-cache.um34hq.ng.0001.usw1.cache.amazonaws.com</content>
			</snippet>
			<snippet>
				<title>UK</title>
				<content>redis-11111.internal.c108.eu-west-2-mz.ec2.cloud.redislabs.com</content>
			</snippet>
			<snippet>
				<title>UK-Cache</title>
				<content>renderer-req-cache.knc5ke.0001.euw2.cache.amazonaws.com</content>
			</snippet>
			<snippet>
				<title>SP</title>
				<content>redis-11111.internal.c109.sa-east-1-1.ec2.cloud.redislabs.com</content>
			</snippet>
			<snippet>
				<title>SP-Cache</title>
				<content>renderer-req-cache.4ad2kq.0001.sae1.cache.amazonaws.com</content>
			</snippet>
			<snippet>
				<title>AU</title>
				<content>redis-11111.internal.c110.ap-southeast-2-mz.ec2.cloud.redislabs.com</content>
			</snippet>
			<snippet>
				<title>AU-Cache</title>
				<content>renderer-req-cache.r3qcrm.0001.apse2.cache.amazonaws.com</content>
			</snippet>
		</snippets>
	</folder>
	<folder>
		<title>Javascript</title>
		<snippets>
			<snippet>
				<title>vide arrow keys</title>
				<content>let theVideo = document.querySelector(&apos;video&apos;)
document.onkeydown = function(event) {
    switch (event.keyCode) {
       case 37:
            event.preventDefault();
            
            vid_currentTime = theVideo.currentTime;
            theVideo.currentTime = vid_currentTime - 5;
          break;
       
       case 39:
            event.preventDefault();
            
            vid_currentTime = theVideo.currentTime;
            theVideo.currentTime = vid_currentTime + 5;
          break;
       
    }
};</content>
			</snippet>
			<snippet>
				<title>get iframe src</title>
				<content>document.querySelector(&apos;iframe&apos;).src</content>
			</snippet>
		</snippets>
	</folder>
	<folder>
		<title>AWS cli queries</title>
		<snippets>
			<snippet>
				<title>describe all volumes that has tag</title>
				<content>aws ec2 describe-volumes --query &apos;Volumes[?Tags[?Key == `kubernetes.io/cluster/spot-dev-us-east-2`]].VolumeId&apos;</content>
			</snippet>
			<snippet>
				<title>print all certificates alt names and expiry</title>
				<content> aws acm list-certificates --query &apos;CertificateSummaryList[*].CertificateArn&apos; | jq -r &apos;.[]&apos; Wr aws acm describe-certificate --query &apos;Certificate.{arn: CertificateArn, altNames: SubjectAlternativeNames, notAfter: NotAfter}&apos; --certificate-arn &quot;$line&quot; D</content>
			</snippet>
		</snippets>
	</folder>
</folders>