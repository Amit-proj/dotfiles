" Plugins {{{
let vimplug_dir = '~/.vim/plugged'
call plug#begin(vimplug_dir)
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'sheerun/vim-polyglot'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

Plug 'terryma/vim-multiple-cursors'

Plug 'christoomey/vim-system-copy'

Plug 'mileszs/ack.vim'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug 'danro/rename.vim'

Plug 'tpope/vim-commentary'

Plug 'jiangmiao/auto-pairs'

Plug 'tpope/vim-sleuth'

Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }

Plug 'neoclide/coc.nvim', {'branch': 'release', 'do': { -> '!brew install yarn' }}

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

Plug 'Yggdroot/indentLine'

" Plug 'xolox/vim-easytags'
" Plug 'xolox/vim-misc'
Plug 'ludovicchabant/vim-gutentags'

Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'dracula/vim'
Plug 'romainl/vim-cool'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'norcalli/nvim-colorizer.lua'
" Plug 'itchyny/vim-cursorword'
Plug 'machakann/vim-highlightedyank'

call plug#end()
" }}}

" Plugin Configurations {{{
" Fzf
" nnoremap <c-p> :Files
nnoremap <silent> <expr> <c-p> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<cr>"
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'
nnoremap <leader>t :Tags<cr>

nnoremap <c-b> :Buffers<cr>

" Ultisnip
let g:UltiSnipsExpandTrigger="<c-s>"

" Vim which key
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>

" nvim-colorschemes
lua require'colorizer'.setup()
" theme
colorscheme OceanicNext
" Undo tree
nnoremap <leader>u :UndotreeToggle<cr>
let g:undotree_WindowLayout=2
let g:undotree_ShortIndicators=1
let g:undotree_SetFocusWhenToggle=1

" Nerd Tree
nnoremap <c-o> :NERDTreeToggle<cr>
nnoremap <silent> <Leader>v :NERDTreeFind<CR>
let g:NERDTreeChDirMode = 2
let g:NERDTreeHijackNetrw=0
" autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr("$") > 1 | b# | endif " Not sure what it does
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif " Close VIM if NERDTree is the only buffer left


function! ToggleNerdFugitiveVimStartup(timer)
    NERDTreeToggle
    if filereadable(expand(".git/index"))
        call FocusOnGit()
    endif
endfunction
" function! ToggleNerdFugitiveVimStartup(timer)
"     vsplit
"     wincmd h
"     Gedit :
"     split
"     wincmd k
"     edit .
"     NERDTreeFocus
"     call nerdtree#ui_glue#invokeKeyMap("A")
"     call nerdtree#ui_glue#invokeKeyMap("A")
"     wincmd l
" endfunction

" Reorganize all buffers
function! ReorganizeAllWindows(timer)
    if (winnr("$") != 1)
        NERDTreeClose
    endif
    if buflisted(bufname('.git/index'))
        b .git/index
        close
        bd .git/index
    endif
    call ToggleNerdFugitiveVimStartup("")
endfunction
nnoremap <leader>ow :call ReorganizeAllWindows("")<cr>

" Ack
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
nnoremap <c-f> :Ack!<Space>

" DevIcons {{{
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1
highlight! link NERDTreeFlags NERDTreeDir
" }}}

" Vim airline (powerline) {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_theme='cobalt2'
" }}}

" GitGutter {{{
let g:gitgutter_highlight_lines = 1
let g:gitgutter_highlight_linenrs = 1
nnoremap <leader>gc :GitGutterLineHighlightsToggle<cr>
nnoremap <leader>cag :GitGutterFold<cr>
function! GitStatus()
    let [a,m,r] = GitGutterGetHunkSummary()
    return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}
highlight clear SignColumn
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=yellow
highlight GitGutterDelete ctermfg=red
highlight GitGutterChangeDelete ctermfg=yellow
" }}}

" Fugitive {{{
" Better branch choosing using :Gbranch
function! s:changebranch(branch)
    execute 'Git checkout ' . a:branch
    call feedkeys("i")
endfunction

command! -bang Gbranch call fzf#run({
            \ 'source': 'git branch -a --sort=-committerdate --format="%(refname:short)" ',
            \ 'sink': function('s:changebranch')
            \ })

" Set branch upstream
command! -bang Gpsup !git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)

" Git push
command! -bang Gp Gpush

" Git pull
command! -bang Gl Gpull

" Create a new branch
function! Gcb(...)
    let name = a:1
    if name == ""
        call inputsave()
        let name = input('Enter branch name: ')
        call inputrestore()
    endif
    execute "!git checkout -b " . name
endfunction
command! -bang -nargs=? Gcb call Gcb("<args>")

function! ToggleGStatus()
    if buflisted(bufname('.git/index'))
        bd .git/index
    else
        Git
    endif
endfunction
command! ToggleGStatus :call ToggleGStatus()
nnoremap <leader>gs :ToggleGStatus<CR>
nnoremap <leader>gg :ToggleGStatus<cr>

" Set current working directory based on the file
" autocmd BufEnter * silent! :lcd%:p:h
" }}}

" }}}

" Coc {{{

" Plugins backup
let g:coc_global_extensions = [
            \    "coc-groovy",
            \    "coc-json",
            \    "coc-marketplace",
            \    "coc-markdownlint",
            \    "coc-neosnippet",
            \    "coc-python",
            \    "coc-sh",
            \    "coc-snippets",
            \    "coc-syntax",
            \    "coc-tsserver",
            \    "coc-vimlsp",
            \    "coc-yaml"
            \]

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" inoremap <silent><expr> <TAB>
"             \ pumvisible() ? coc#_select_confirm() :
"             \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"             \ <SID>check_back_space() ? "\<TAB>" :
"             \ coc#refresh()
"
" function! s:check_back_space() abort
"     let col = col('.') - 1
"     return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

let g:coc_snippet_next = '<tab>'

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show commands.
nnoremap <silent><nowait> <leader>cc  :<C-u>CocList commands<cr>
" Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" }}}
