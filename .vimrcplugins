" Plugins {{{
let vimplug_dir = '~/.vim/plugged'
call plug#begin(vimplug_dir)
Plug 'preservim/nerdtree'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'sheerun/vim-polyglot'

Plug 'terryma/vim-multiple-cursors'

Plug 'mileszs/ack.vim'

Plug 'jiangmiao/auto-pairs'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'idanarye/vim-merginal'

Plug 'Yggdroot/indentLine'

Plug 'xolox/vim-easytags'
Plug 'xolox/vim-misc'

Plug 'dracula/vim'
Plug 'rafi/awesome-vim-colorschemes'

call plug#end()
" }}}

" Plugin Configurations {{{
" Fzf
" nnoremap <c-p> :Files
nnoremap <silent> <expr> <c-p> (expand('%') =~ 'NERD_tree' ? "\<c-w>\<c-w>" : '').":Files\<cr>"
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'

nnoremap <c-b> :Buffers<cr>

" Nerd Tree
nnoremap <c-o> :NERDTreeToggle<cr>
let g:NERDTreeChDirMode = 2

function! ToggleNerdFugitiveVimStartup(timer)
    NERDTreeToggle
    if filereadable(expand(".git/index"))
        rightbelow Gstatus
        wincmd l
    endif
endfunction
autocmd VimEnter * if !argc() | let timer = timer_start(500, 'ToggleNerdFugitiveVimStartup') | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Reorganize all buffers
function! ReorganizeAllWindows() 
    NERDTreeClose
    if buflisted(bufname('.git/index'))
        bd .git/index
    endif
    call ToggleNerdFugitiveVimStartup("")
endfunction
nnoremap <leader>ow :call ReorganizeAllWindows()<cr>

" Ack
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
nnoremap <c-f> :Ack!<Space>

" DevIcons {{{
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1
highlight! link NERDTreeFlags NERDTreeDir
" }}}

" Vim airline (powerline) {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_theme='wombat'
" }}}

" GitGutter {{{
let g:gitgutter_highlight_lines = 1
let g:gitgutter_highlight_linenrs = 1
nnoremap <leader>gc :GitGutterLineHighlightsToggle<cr>
nnoremap <leader>cag :GitGutterFold<cr>
function! GitStatus()
    let [a,m,r] = GitGutterGetHunkSummary()
    return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}
highlight clear SignColumn
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=yellow
highlight GitGutterDelete ctermfg=red
highlight GitGutterChangeDelete ctermfg=yellow
" }}}

" Fugitive {{{
" Better branch choosing using :Gbranch
function! s:changebranch(branch)
    execute 'Git checkout ' . a:branch
    call feedkeys("i")
endfunction

command! -bang Gbranch call fzf#run({
            \ 'source': 'git branch -a --sort=-committerdate --format="%(refname:short)" ',
            \ 'sink': function('s:changebranch')
            \ })

" Set branch upstream
command! -bang Gpsup !git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)

" Create a new branch
function! Gcb(...)
    let name = a:1
    if name == ""
        call inputsave()
        let name = input('Enter branch name: ')
        call inputrestore()
    endif
    execute "!git checkout -b " . name
endfunction
command! -bang -nargs=? Gcb call Gcb("<args>")

" Toggle git status
function! ToggleGStatus()
    if buflisted(bufname('.git/index'))
        bd .git/index
    else
        NERDTreeFocus
        rightbelow Gstatus
    endif
endfunction
command! ToggleGStatus :call ToggleGStatus()
nnoremap <leader>gs :ToggleGStatus<CR>

" Focus on git window
nnoremap <leader>gg :Git<cr>

" Set current working directory based on the file
" autocmd BufEnter * silent! :lcd%:p:h
" }}}

" theme
colorscheme OceanicNext
" }}}

" Coc {{{

" Plugins backup
let g:coc_global_extensions = [
            \    "coc-vimlsp",
            \    "coc-snippets",
            \    "coc-neosnippet",
            \    "coc-marketplace",
            \    "coc-yaml",
            \    "coc-tsserver",
            \    "coc-sh",
            \    "coc-python",
            \    "coc-json",
            \    "coc-groovy"
            \]

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

inoremap <silent><expr> <TAB>
            \ pumvisible() ? coc#_select_confirm() :
            \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show commands.
nnoremap <silent><nowait> <leader>cc  :<C-u>CocList commands<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" }}}

" vundle {{{
" set nocompatible
" filetype off

" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()

" Plugin 'VundleVim/Vundle.vim'
" " Plugin 'isnowfy/python-vim-instant-markdown'
" " Plugin 'jtratner/vim-flavored-markdown'
" " Plugin 'suan/vim-instant-markdown'
" " Plugin 'nelstrom/vim-markdown-preview'
" " Plugin 'vim-scripts/Pydiction'
" "Plugin" 'vim-scripts/indentpython.vim'
" Plugin 'scrooloose/nerdcommenter'
" Plugin 'terryma/vim-multiple-cursors'

" " Show indentation lines
" Plugin 'Yggdroot/indentLine'

" " Cool status line
" Plugin 'vim-airline/vim-airline-themes'
" Plugin 'vim-airline/vim-airline'

" " Language pack
" Plugin 'sheerun/vim-polyglot'

" " Remove extra trailing whitespace
" Plugin 'bronson/vim-trailing-whitespace'

" " removes, adds or changes surroundings
" " Plugin 'machakann/vim-sandwich'
" " saiw = add surrounding in word
" " sai( = add surrounding in (
" " sdb  = delete surrounding (b = auto detect)
" " sd(  = delete surrounding (
" " srb' = replace surrounding with ' (b = auto detect)
" " sr(' = replace ( surrounding with '
" " saiwt = suround with HTML tag
" " saiwf = surround with function


" " JS / CSS / HTML beautify, uglify
" "Plugin 'michalliu/jsruntime.vim'
" "Plugin 'michalliu/jsoncodecs.vim'
" "Plugin 'michalliu/sourcebeautify.vim'

" " Plugin 'sjl/gundo.vim' " undo list - mapped to <leader>u
" " Plugin 'ervandew/supertab'

" " Color scheme
" Plugin 'dracula/vim'

" " Syntax checking
" " Plugin 'nvie/vim-flake8'

" " Fuzzy finder
" "Plugin 'junegunn/fzf', { 'do': './install --all' }
" "Plugin 'junegunn/fzf.vim'
" "let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g "" 2>/dev/null'


" " Git integration
" " Plugin 'airblade/vim-gitgutter.git'

" " HTML Emmet
" " Plugin 'mattn/emmet-vim'
" call vundle#end()

" " Nerd commenter settings
" let g:NERDSpaceDelims = 1

" " Set syntax for json
" au BufRead,BufNewFile *.json setf json
" }}}                   
"
